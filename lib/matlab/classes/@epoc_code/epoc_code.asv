function c = epoc_code(varargin)
%% EPOC_CODE Constructor function for epoc_code object
% b = epoc_code(session,blocknumber,starttime,protocol,channelmap,experimenter,blockname,tankname)
% b = epoc_code(blockname,tank)

% Class specification
fieldspec = {'name'         'class'         'notnull'   'default'};
classspec = {...
            'code'          'char'          true        ''...
    };
classspec = cell2struct(classspec,fieldspec,2);
nfields = length(classspec);

switch nargin

%% If no input arguments, create a default object
case 0
    for jj = 1:nfields
        
        % For some reason, calling 'int32' requires an argument even if
        % it's null
        if strncmp(classspec(jj).class,'int',3)
            c.(classspec(jj).name) = eval([classspec(jj).class,'([])']);
        else
            c.(classspec(jj).name) = eval(classspec(jj).class);
        end
    end
    
%% If single argument of class block, return it
case 1
   if (isa(varargin{1},'epoc_code'))
        c = varargin{1};
        return
   elseif isa(varargi{1},
           % Determine which inputs go where
        assigned = [classspec.notnull];
        n_notnull = sum([classspec.notnull]);
        n_extra = nargin-n_notnull;
        if n_extra < 0
            error('Not enough input arguments')
        elseif n_extra > 0
            % Assign earlier optional variables enough
            assigned(find(~assigned,extra,'first')) = true;
        end

        % Assign field values
        for jj = 1:nfields
            if assigned(jj)
                input_idx = sum(assigned(1:jj));
                val = varargin{input_idx};

                % Check input type
                if isa(val,classspec(jj).class)
                    c.(classspec(jj).name) = val;

                % Recast if needed
                elseif isnumeric(val)
                    warning('ClassDef:InputType',...
                        'Recasting input "%s" as class "%s"',...
                        classspec(jj).name,classspec(jj).class);
                    c.(classspec(jj).name) = eval([classspec(jj).class,...
                        '(val);']);
                else
                    error('ClassDef:InputType',...
                        'Input "%s" must be of class "%s"',...
                        classspec(jj).name,classspec(jj).class);
                end
            else
                c.(classspec(jj).name) = cast(classspec(jj).default,...
                    classspec(jj).class);
            end
        end
   else
      error('Wrong argument type')
   end

%% Error for wrong number of inputs  
otherwise
   error('Wrong number of input arguments')
end

%% Create output object
c = class(c,'epoc_code');